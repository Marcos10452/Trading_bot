for dataframe in ['df_training','df_validation']:
    #---------------------------------------------------------------------
    #eval(dataframe)["feature_nweek"] = eval(dataframe)["n_weekday"]
    #eval(dataframe)["feature_holiday"] =  eval(dataframe)["holidays"]
    eval(dataframe)["feature_nhour"] =  eval(dataframe)["n_hour"]
    
    #Create the feature : ( close[t] - close[t-1] )/ close[t-1]
    #df_training["diff_close"] = df_training['close'].diff()
    #eval(dataframe)["feature_close"] = ( eval(dataframe)["close"]) /  eval(dataframe)["close"].abs().max() 
    #eval(dataframe)["feature_close"] = _remove_linear_tendecy(eval(dataframe)["close"]) 
    #eval(dataframe)["feature_close"] = _simple_net_return(eval(dataframe)["close"]) 
    eval(dataframe)["feature_close"] = _log_return(eval(dataframe)["close"]) 
    
    # Create the feature : open[t] / close[t]
    eval(dataframe)["feature_open"] = _log_return(eval(dataframe)["open"]) 
    #eval(dataframe)["feature_open"] = ( eval(dataframe)["open"])/  eval(dataframe)["close"].abs().max() 
    
    # Create the feature : high[t] / close[t]
    eval(dataframe)["feature_high"] = _log_return(eval(dataframe)["high"]) 
    #eval(dataframe)["feature_high"] = ( eval(dataframe)["high"])/  eval(dataframe)["close"].abs().max() 
    
    # Create the feature : low[t] / close[t]
    eval(dataframe)["feature_low"] = _log_return(eval(dataframe)["low"]) 
    #eval(dataframe)["feature_low"]= ( eval(dataframe)["low"])/  eval(dataframe)["close"].abs().max() 
    
    #eval(dataframe)["feature_volume"] =  eval(dataframe)["volume"].apply(lambda x: np.log(x) if x!=0 else x)/  eval(dataframe)["close"].abs().max() 
    eval(dataframe)["feature_volume"] = _log_return(eval(dataframe)["volume"])     
    #eval(dataframe)["feature_volume"] =  eval(dataframe)["volume"]/  (eval(dataframe)["close"].abs().max()*1000000)
    #create columns for  relevance_score (x) and ticket_sentiment_score (y)
    # l1 is from 11 to 55 because I am selecting from score20_x to score1_y
    for column in l1[11:55]:
        column_name="feature_"+column
        eval(dataframe)[column_name]= eval(dataframe)[column] 
    #---------------------------------------------------------------------

continuing 20240423_2239

NGAMES=200


input_dims=env.observation_space,n_actions=len(env.action_space),
mem_size=1000000, eps_min=0.01,
batch_size=16, replace=1000, eps_dec=1e-3, # batch_size=32 ATTENTION
n_neurons1=256,n_neurons2=256,
dir=PATH_EVAL, dir2=PATH_NEXT,
env_name='Trading_bot')